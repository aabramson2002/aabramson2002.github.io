{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://abramson-a-hw03/./src/utils.ts","webpack://abramson-a-hw03/./src/enums/audio-defaults.enum.ts","webpack://abramson-a-hw03/./src/audio.ts","webpack://abramson-a-hw03/./src/classes/triangle.ts","webpack://abramson-a-hw03/./src/canvas.ts","webpack://abramson-a-hw03/./src/enums/main-defaults.enum.ts","webpack://abramson-a-hw03/./src/main.ts","webpack://abramson-a-hw03/./src/loader.ts"],"sourcesContent":["import { ColorStop } from \"./interfaces/colorStop.interface\";\r\n\r\nconst makeColor = (red:number, green:number, blue:number, alpha:number = 1) => {\r\n  return `rgba(${red},${green},${blue},${alpha})`;\r\n};\r\n\r\nconst getRandom = (min:number, max:number) => {\r\n  return Math.random() * (max - min) + min;\r\n};\r\n\r\nconst getRandomColor = () => {\r\n  const floor = 35; // so that colors are not too bright or too dark \r\n  const getByte = () => getRandom(floor, 255 - floor);\r\n  return `rgba(${getByte()},${getByte()},${getByte()},1)`;\r\n};\r\n\r\n//creates linear gradient\r\nconst getLinearGradient = (ctx:CanvasRenderingContext2D, startX:number, startY:number, endX:number, endY:number, colorStops:ColorStop[]) => {\r\n  let lg = ctx.createLinearGradient(startX, startY, endX, endY);\r\n  for (let stop of colorStops) {\r\n    lg.addColorStop(stop.percent, stop.color);\r\n  }\r\n  return lg;\r\n};\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\r\nconst goFullscreen = (element) => {\r\n  if (element.requestFullscreen) {\r\n    element.requestFullscreen();\r\n  } else if (element.mozRequestFullscreen) {\r\n    element.mozRequestFullscreen();\r\n  } else if (element.mozRequestFullScreen) { // camel-cased 'S' was changed to 's' in spec\r\n    element.mozRequestFullScreen();\r\n  } else if (element.webkitRequestFullscreen) {\r\n    element.webkitRequestFullscreen();\r\n  }\r\n  // .. and do nothing if the method is not supported\r\n};\r\n\r\nexport { makeColor, getRandomColor, getLinearGradient, goFullscreen };","export enum DEFAULTS {\r\n    gain = .5,\r\n    numSamples = 256\r\n}","import { DEFAULTS } from \"./enums/audio-defaults.enum\";\r\n\r\n// 1 - our WebAudio context, **we will export and make this public at the bottom of the file**\r\nlet audioCtx:AudioContext;\r\n\r\n// **These are \"private\" properties - these will NOT be visible outside of this module (i.e. file)**\r\n// 2 - WebAudio nodes that are part of our WebAudio audio routing graph\r\nlet element:HTMLAudioElement, sourceNode:AudioNode, biquadFilter:BiquadFilterNode, lowShelfBiquadFilter:BiquadFilterNode, analyserNode:AnalyserNode, gainNode:GainNode;\r\n\r\n// **Next are \"public\" methods - we are going to export all of these at the bottom of this file**\r\nconst setUpWebAudio = (filePath:string) => {\r\n    // 1 - The || is because WebAudio has not been standardized across browsers yet\r\n    audioCtx = new AudioContext();\r\n\r\n    // 2 - this creates an <audio> element\r\n    element = new Audio();\r\n\r\n    // 3 - have it point at a sound file\r\n    loadSoundFile(filePath);\r\n\r\n    // 4 - create an a source node that points at the <audio> element\r\n    sourceNode = audioCtx.createMediaElementSource(element);\r\n\r\n    // 5 - create an analyser node\r\n    // note the UK spelling of \"Analyser\"\r\n    analyserNode = audioCtx.createAnalyser();\r\n\r\n    /*\r\n    // 6\r\n    We will request DEFAULTS.numSamples number of samples or \"bins\" spaced equally \r\n    across the sound spectrum.\r\n    \r\n    If DEFAULTS.numSamples (fftSize) is 256, then the first bin is 0 Hz, the second is 172 Hz, \r\n    the third is 344Hz, and so on. Each bin contains a number between 0-255 representing \r\n    the amplitude of that frequency.\r\n    */\r\n\r\n    // fft stands for Fast Fourier Transform\r\n    analyserNode.fftSize = DEFAULTS.numSamples;\r\n\r\n    // create biquad filter nodes\r\n    biquadFilter = audioCtx.createBiquadFilter();\r\n    biquadFilter.type = \"highshelf\";\r\n\r\n    lowShelfBiquadFilter = audioCtx.createBiquadFilter();\r\n    lowShelfBiquadFilter.type = \"lowshelf\";\r\n\r\n    // 7 - create a gain (volume) node\r\n    gainNode = audioCtx.createGain();\r\n    gainNode.gain.value = DEFAULTS.gain;\r\n\r\n    // 8 - connect the nodes - we now have an audio graph\r\n    sourceNode.connect(biquadFilter);\r\n    biquadFilter.connect(lowShelfBiquadFilter);\r\n    lowShelfBiquadFilter.connect(analyserNode);\r\n    analyserNode.connect(gainNode);\r\n    gainNode.connect(audioCtx.destination);\r\n}\r\n\r\nconst loadSoundFile = (filePath:string) => {\r\n    element.src = filePath;\r\n}\r\n\r\nconst playCurrentSound = () => {\r\n    element.play();\r\n}\r\n\r\nconst pauseCurrentSound = () => {\r\n    element.pause();\r\n}\r\n\r\nconst setVolume = (value: string | number) => {\r\n    value = Number(value); // make sure that it's a Number rather than a String\r\n    gainNode.gain.value = value;\r\n}\r\n\r\n//turns on/off the treble\r\nconst toggleHighshelf = (on:boolean) => {\r\n    if (on) {\r\n        biquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n        biquadFilter.gain.setValueAtTime(25, audioCtx.currentTime);\r\n    } else {\r\n        biquadFilter.gain.setValueAtTime(0, audioCtx.currentTime);\r\n    }\r\n}\r\n\r\n//turns on/off the bass\r\nconst toggleLowshelf = (on:boolean) => {\r\n    if (on) {\r\n        lowShelfBiquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n        lowShelfBiquadFilter.gain.setValueAtTime(15, audioCtx.currentTime);\r\n    } else {\r\n        lowShelfBiquadFilter.gain.setValueAtTime(0, audioCtx.currentTime);\r\n    }\r\n}\r\n\r\nexport { audioCtx, setUpWebAudio, playCurrentSound, pauseCurrentSound, loadSoundFile, setVolume, toggleHighshelf, toggleLowshelf, analyserNode };","export default class Triangle {\r\n    p1: number;\r\n    p2: number;\r\n    p3: number;\r\n    fillColor: string;\r\n\r\n    constructor(p1:number, p2:number, p3:number, fillColor:string) {\r\n        Object.assign(this, { p1, p2, p3, fillColor });\r\n    }\r\n\r\n    //moves triangles position based on audio data\r\n    update() {\r\n        // keep a reference to the analyser node\r\n        //let analyserNode;\r\n\r\n        // this is the array where the analyser data will be stored\r\n        //let audioData = new Uint8Array(analyserNode.fftSize / 2);\r\n        //analyserNode.getByteFrequencyData(audioData);\r\n\r\n                /*for (let i = 0; i < audioData.length; i += 3) {\r\n            this.p1 += audioData[i];\r\n            this.p2 += audioData[i + 1];\r\n            this.p3 += audioData[i + 2];\r\n        }*/\r\n\r\n        //let canvasElement;\r\n       //let canvasHeight = canvasElement.height;\r\n\r\n        this.p1++;\r\n        this.p2++;\r\n        this.p3++;\r\n\r\n        //loops the triangle around the screen if it goes out of bounds. \r\n        /*if (this.p1 > canvasHeight || this.p2 > canvasHeight || this.p3 > canvasHeight){\r\n            this.p1 = 0;\r\n            this.p2 = -50;\r\n            this.p3 = 50;\r\n        }*/\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        ctx.translate(100,0);\r\n        ctx.rotate(Math.PI/4);\r\n        ctx.moveTo(this.p1, this.p2);\r\n        ctx.lineTo(this.p2, this.p3);\r\n        ctx.lineTo(this.p3, this.p1);\r\n        ctx.closePath();\r\n        ctx.fillStyle = this.fillColor;\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n}","/*\r\n    The purpose of this file is to take in the analyser node and a <canvas> element: \r\n      - the module will create a drawing context that points at the <canvas> \r\n      - it will store the reference to the analyser node\r\n      - in draw(), it will loop through the data in the analyser node\r\n      - and then draw something representative on the canvas\r\n      - maybe a better name for this file/module would be *visualizer.js* ?\r\n*/\r\n\r\nimport * as utils from './utils';\r\nimport Triangle from './classes/triangle';\r\nimport { DrawParams } from './interfaces/drawParams.interface';\r\n\r\n//constants\r\nlet ctx:CanvasRenderingContext2D, canvasWidth:number, canvasHeight:number, gradient:CanvasGradient, analyserNode:AnalyserNode, audioData;\r\n\r\nconst setupCanvas = (canvasElement:HTMLCanvasElement, analyserNodeRef:AnalyserNode) => {\r\n    // create drawing context\r\n    ctx = canvasElement.getContext(\"2d\");\r\n    canvasWidth = canvasElement.width;\r\n    canvasHeight = canvasElement.height;\r\n    // create a gradient that runs top to bottom\r\n    gradient = utils.getLinearGradient(ctx, 0, 0, 0, canvasHeight, [{ percent: 0, color: \"silver\" }, { percent: .25, color: \"cyan\" }, { percent: .5, color: \"skyblue\" }, { percent: .75, color: \"blue\" }, { percent: 1, color: \"green\" }]);\r\n    // keep a reference to the analyser node\r\n    analyserNode = analyserNodeRef;\r\n    // this is the array where the analyser data will be stored\r\n    audioData = new Uint8Array(analyserNode.fftSize / 2);\r\n}\r\n\r\nconst draw = (params:DrawParams) => {\r\n    // 1 - populate the audioData array with the frequency data from the analyserNode\r\n    // notice these arrays are passed \"by reference\" \r\n    analyserNode.getByteFrequencyData(audioData);\r\n    // OR\r\n    //analyserNode.getByteTimeDomainData(audioData); // waveform data\r\n\r\n    // 2 - draw background\r\n    ctx.save();\r\n    ctx.fillStyle = \"black\";\r\n    ctx.globalAlpha = .1;\r\n    ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n    ctx.restore();\r\n\r\n    // 3 - draw gradient\r\n    if (params.showGradient) {\r\n        ctx.save();\r\n        ctx.fillStyle = gradient;\r\n        ctx.globalAlpha = .3;\r\n        ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n        ctx.restore();\r\n    }\r\n\r\n    // 4 - draw bars\r\n    if (params.showBars) {\r\n        let barSpacing = 4;\r\n        let margin = 5;\r\n        let screenWidthForBars = canvasWidth - (audioData.length * barSpacing) - margin * 2;\r\n        let barWidth = screenWidthForBars / audioData.length;\r\n        let barHeight = 200;\r\n        let topSpacing = 100;\r\n\r\n        ctx.save();\r\n        ctx.fillStyle = 'rgba(255,255,255,0.50)';\r\n        ctx.strokeStyle = 'rgba(0,0,0,0.50)';\r\n        //loop through the data and draw\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            ctx.fillRect(margin + i * (barWidth + barSpacing), topSpacing - 256 + audioData[i], barWidth, barHeight);\r\n            ctx.strokeRect(margin + i * (barWidth + barSpacing), topSpacing - 256 + audioData[i], barWidth, barHeight);\r\n        }\r\n        ctx.restore();\r\n    }\r\n\r\n    // 5 - draw circles\r\n    if (params.showCircles) {\r\n        let maxRadius = canvasHeight / 4;\r\n        ctx.save();\r\n        ctx.globalAlpha = 0.5;\r\n        for (let i = 0; i < audioData.length; i++) {\r\n\r\n            //yellow circles\r\n            let percent = audioData[i] / 255;\r\n            let circleRaidus = percent * maxRadius;\r\n            ctx.beginPath();\r\n            ctx.fillStyle = utils.makeColor(200, 200, 0, .34 - percent / 3.0);\r\n            ctx.arc(canvasWidth / 2, canvasHeight / 2, circleRaidus, 0, Math.PI * 2, false);\r\n            ctx.fill();\r\n            ctx.closePath();\r\n\r\n            //pink larger circles\r\n            ctx.beginPath();\r\n            ctx.fillStyle = utils.makeColor(255, 111, 111, .10 - percent / 10.0);\r\n            ctx.arc(canvasWidth / 2, canvasHeight / 2, circleRaidus * 1.5, 0, Math.PI * 2, false);\r\n            ctx.fill();\r\n            ctx.closePath();\r\n\r\n            //red smaller circles\r\n            ctx.save();\r\n            ctx.beginPath();\r\n            ctx.fillStyle = utils.makeColor(100, 50, 0, .5 - percent / 5.0);\r\n            ctx.arc(canvasWidth / 2, canvasHeight / 2, circleRaidus * .5, 0, Math.PI * 2, false);\r\n            ctx.fill();\r\n            ctx.closePath();\r\n            ctx.restore();\r\n        }\r\n        ctx.restore();\r\n    }\r\n\r\n    //draws instances of triangles on the canvas\r\n    if (params.showTriangles) {\r\n        let sprites = [];\r\n\r\n        sprites.push(new Triangle(100, 200, 30, \"yellow\"));\r\n        sprites.push(new Triangle(50, 100, 0, \"orange\"));\r\n\r\n        sprites.forEach(s => {\r\n            s.draw(ctx);\r\n            s.update();\r\n        });\r\n    }\r\n\r\n    // 6 - bitmap manipulation\r\n    // TODO: right now. we are looping though every pixel of the canvas (320,000 of them!), \r\n    // regardless of whether or not we are applying a pixel effect\r\n    // At some point, refactor this code so that we are looping though the image data only if\r\n    // it is necessary\r\n\r\n    // A) grab all of the pixels on the canvas and put them in the `data` array\r\n    // `imageData.data` is a `Uint8ClampedArray()` typed array that has 1.28 million elements!\r\n    // the variable `data` below is a reference to that array \r\n    let imageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\r\n    let data = imageData.data;\r\n    let length = data.length;\r\n    let width = imageData.width;\r\n\r\n    // B) Iterate through each pixel, stepping 4 elements at a time (which is the RGBA for 1 pixel)\r\n    for (let i = 0; i < length; i += 4) {\r\n        // C) randomly change every 20th pixel to red\r\n        if (params.showNoise && Math.random() < .05) {\r\n            // data[i] is the red channel\r\n            // data[i+1] is the green channel\r\n            // data[i+2] is the blue channel\r\n            // data[i+3] is the alpha channel\r\n            data[i] = data[i + 1] = data[i + 2] = 0;// zero out the red and green and blue channels\r\n            data[i + 2] = 255;// make the red channel 100% red\r\n        } // end if   \r\n\r\n        if (params.showInvert) {\r\n            let red = data[i], green = data[i + 1], blue = data[i + 2];\r\n            data[i] = 255 - red; //set red\r\n            data[i + 1] = 255 - green; //set green\r\n            data[i + 2] = 255 - blue; //set blue\r\n            // data[i+3] is the alpha channel\r\n        }\r\n    } // end for\r\n\r\n\r\n\r\n    // D) copy image data back to canvas\r\n    ctx.putImageData(imageData, 0, 0);\r\n}\r\n\r\nexport { setupCanvas, draw };","export enum DEFAULTS {\r\n    sound1 = \"media/New Adventure Theme.mp3\"\r\n}","/*\r\n  main.js is primarily responsible for hooking up the UI to the rest of the application \r\n  and setting up the main event loop\r\n*/\r\n\r\n// We will write the functions in this file in the traditional ES5 way\r\n// In this instance, we feel the code is more readable if written this way\r\n// If you want to re-write these as ES6 arrow functions, to be consistent with the other files, go ahead!\r\n\r\nimport * as utils from './utils';\r\nimport * as audio from './audio';\r\nimport * as canvas from './canvas';\r\nimport { DEFAULTS } from './enums/main-defaults.enum';\r\n//import { DrawParams } from './interfaces/drawParams.interface';\r\n\r\nconst drawParams = {\r\n  showGradient: true,\r\n  showBars: true,\r\n  showCircles: true,\r\n  showTriangles: false,\r\n  showNoise: false,\r\n  showInvert: false,\r\n};\r\n\r\nconst init = () => {\r\n  audio.setUpWebAudio(DEFAULTS.sound1);\r\n\r\n  console.log(\"init called\");\r\n  console.log(`Testing utils.getRandomColor() import: ${utils.getRandomColor()}`);\r\n  let canvasElement = document.querySelector(\"canvas\"); // hookup <canvas> element\r\n  setupUI(canvasElement);\r\n  canvas.setupCanvas(canvasElement, audio.analyserNode);\r\n  loop();\r\n}\r\n\r\nconst setupUI = (canvasElement:HTMLCanvasElement) => {\r\n  // A - hookup fullscreen button\r\n  const fsButton = document.querySelector(\"#btn-fs\") as HTMLButtonElement;\r\n\r\n  // add .onclick event to button\r\n  fsButton.onclick = () => {\r\n    console.log(\"goFullscreen() called\");\r\n    utils.goFullscreen(canvasElement);\r\n  };\r\n\r\n  // B - hookup play button\r\n  const playButton = document.querySelector(\"#btn-play\") as HTMLButtonElement;\r\n\r\n  // add .onclick event to play button\r\n  playButton.onclick = e => {\r\n    console.log(`audioCtx.state before = ${audio.audioCtx.state}`);\r\n\r\n    const target = e.target as HTMLInputElement;\r\n\r\n    // check if context is in suspended state (autoplay policy)\r\n    if (audio.audioCtx.state == \"suspended\") {\r\n      audio.audioCtx.resume();\r\n    }\r\n    console.log(`audioCtx.state after = ${audio.audioCtx.state}`);\r\n    //if the track is paused, play it\r\n    if (target.dataset.playing == \"no\") {\r\n      audio.playCurrentSound();\r\n      target.dataset.playing = \"yes\"; //CSS sets text to \"Pause\"\r\n    }\r\n    //if the track is playing, pause it\r\n    else {\r\n      audio.pauseCurrentSound();\r\n      target.dataset.playing = \"no\"; //CSS sets text to \"Play\"\r\n    }\r\n  };\r\n\r\n  // C - hookup volume slider and label\r\n  let volumeSlider = document.querySelector(\"#slider-volume\") as HTMLInputElement;\r\n  let volumeLabel = document.querySelector(\"#label-volume\") as HTMLElement;\r\n\r\n  // add .oninput event to slider\r\n  volumeSlider.oninput = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    //set gain\r\n    audio.setVolume(target.value);\r\n    //update value of label to match value of the slider\r\n    volumeLabel.innerHTML = String(Math.round((+target.value / 2 * 100)));\r\n  };\r\n\r\n  //set value of label to match the initial value of the slider\r\n  volumeSlider.dispatchEvent(new Event(\"input\"));\r\n\r\n  // D - hookup track <select>\r\n  let trackSelect = document.querySelector(\"#select-track\") as HTMLSelectElement;\r\n  //add .onchange event to <select>\r\n  trackSelect.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    audio.loadSoundFile(target.value);\r\n    //pause current track if it's playing\r\n    if (playButton.dataset.playing == \"yes\") {\r\n      playButton.dispatchEvent(new MouseEvent(\"click\"));\r\n    }\r\n  };\r\n\r\n  //checkboxes\r\n  let gradientCB = document.querySelector(\"#cb-gradient\") as HTMLInputElement;\r\n  let barsCB = document.querySelector(\"#cb-bars\") as HTMLInputElement;\r\n  let circlesCB = document.querySelector(\"#cb-circles\") as HTMLInputElement;\r\n  let noiseCB = document.querySelector(\"#cb-noise\") as HTMLInputElement;\r\n  let invertCB = document.querySelector(\"#cb-invert\") as HTMLInputElement;\r\n  let trianglesCB = document.querySelector(\"#cb-triangles\") as HTMLInputElement;\r\n  let highshelfCB = document.querySelector(\"#cb-highshelf\") as HTMLInputElement;\r\n  let lowshelfCB = document.querySelector(\"#cb-lowshelf\") as HTMLInputElement;\r\n\r\n  //initial true values\r\n  gradientCB.checked = true;\r\n  barsCB.checked = true;\r\n  circlesCB.checked = true;\r\n\r\n  //toggles canvas/audio effects every time a checkbox is checked\r\n  gradientCB.onchange = () => {\r\n    drawParams.showGradient = gradientCB.checked;\r\n  };\r\n\r\n  barsCB.onchange = () => {\r\n    drawParams.showBars = barsCB.checked;\r\n  };\r\n\r\n  circlesCB.onchange = () => {\r\n    drawParams.showCircles = circlesCB.checked;\r\n  };\r\n\r\n  noiseCB.onchange = () => {\r\n    drawParams.showNoise = noiseCB.checked;\r\n  };\r\n\r\n  invertCB.onchange = () => {\r\n    drawParams.showInvert = invertCB.checked;\r\n  };\r\n\r\n  trianglesCB.onchange = () => {\r\n    drawParams.showTriangles = trianglesCB.checked;\r\n  };\r\n\r\n  highshelfCB.onchange = () => {\r\n    audio.toggleHighshelf(highshelfCB.checked);\r\n  };\r\n\r\n  lowshelfCB.onchange = () => {\r\n    audio.toggleLowshelf(lowshelfCB.checked);\r\n  };\r\n\r\n  //initial highshelf/lowshelf declaration\r\n  audio.toggleHighshelf(highshelfCB.checked);\r\n  audio.toggleLowshelf(lowshelfCB.checked);\r\n\r\n} // end setupUI\r\n\r\nconst loop = () => {\r\n  /* NOTE: This is temporary testing code that we will delete in Part II */\r\n  setTimeout(loop, 1000 / 60);\r\n  canvas.draw(drawParams);\r\n}\r\n\r\nexport { init };","import * as main from \"./main\";\r\nwindow.onload = () => {\r\n\tconsole.log(\"window.onload called\");\r\n\t// 1 - do preload here - load fonts, images, additional sounds, etc...\r\n\r\n\t//function that loads in preliminary data stored in data-av.json\r\n\tconst loadData = () => {\r\n\t\tconst songs = document.querySelector(\"#select-track\");\r\n\t  \r\n\t\tconst url = \"data/data-av.json\";\r\n\t\tconst xhr = new XMLHttpRequest();\r\n\t\txhr.onload = e => {\r\n\t\t\tconst target = e.target as XMLHttpRequest;\r\n\t\t  console.log(`HTTP Staus Code: ${target.status}`);\r\n\t\t  const text = target.responseText;\r\n\t\t  let json;\r\n\t\t  try {\r\n\t\t\tjson = JSON.parse(text);\r\n\t\t  }\r\n\t\t  catch {\r\n\t\t\tconsole.log(\"JSON.parse Failed!\");\r\n\t\t\treturn;\r\n\t\t  }\r\n\t\t  document.querySelector(\"#title\").innerHTML = json.title;\r\n\t\t  let html = \"\";\r\n\t\t  for (let s of json.songs) {\r\n\t\t\thtml += `<option value=\"${s.link}\">${s.name}</option>`;\t  \r\n\t\t  }\r\n\t\t  songs.innerHTML = html;\r\n\t\t  \r\n\t\t  document.querySelector(\"#instructions\").innerHTML = json.instructions;\r\n\r\n\t\t};\r\n\t\txhr.onerror = () => { \"Error\" };\r\n\t\txhr.open(\"GET\", url);\r\n\t\txhr.send();\r\n\t  }\r\n\r\n\t  loadData();\r\n\t// 2 - start up app\r\n\tmain.init();\r\n}"],"names":["DEFAULTS","audioCtx","sourceNode","biquadFilter","lowShelfBiquadFilter","analyserNode","gainNode","makeColor","red","green","blue","alpha","loadSoundFile","filePath","src","toggleHighshelf","on","frequency","setValueAtTime","currentTime","gain","toggleLowshelf","p1","p2","p3","fillColor","Object","assign","this","update","draw","ctx","save","beginPath","translate","rotate","Math","PI","moveTo","lineTo","closePath","fillStyle","fill","restore","canvasWidth","canvasHeight","gradient","audioData","drawParams","showGradient","showBars","showCircles","showTriangles","showNoise","showInvert","init","getByte","sound1","AudioContext","Audio","createMediaElementSource","createAnalyser","fftSize","numSamples","createBiquadFilter","type","createGain","value","connect","destination","console","log","random","canvasElement","document","querySelector","setupUI","analyserNodeRef","getContext","width","height","startX","startY","endX","endY","colorStops","lg","createLinearGradient","percent","color","addColorStop","Uint8Array","loop","onclick","element","requestFullscreen","mozRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","playButton","e","state","target","resume","dataset","playing","play","pause","volumeSlider","volumeLabel","oninput","Number","innerHTML","String","round","dispatchEvent","Event","onchange","MouseEvent","gradientCB","barsCB","circlesCB","noiseCB","invertCB","trianglesCB","highshelfCB","lowshelfCB","checked","setTimeout","params","getByteFrequencyData","globalAlpha","fillRect","barWidth","length","margin","strokeStyle","i","topSpacing","strokeRect","maxRadius","circleRaidus","arc","sprites","push","forEach","s","imageData","getImageData","data","putImageData","window","onload","songs","xhr","XMLHttpRequest","status","json","text","responseText","JSON","parse","title","html","link","name","instructions","onerror","open","send"],"sourceRoot":""}